import type { CatalogDependency } from "./types";

export const DEFAULT_VERSION = "0.1.0";
export const DEFAULT_LICENSE = "MIT";

export const WORKSPACES = {
  PACKAGES: "packages",
  TSCONFIG: "packages/tsconfig",
} as const;

export const DEFAULT_CATALOG: readonly CatalogDependency[] = [
  { name: "typescript", version: "^5.7.2" },
  { name: "@types/bun", version: "^1.3.0" },
] as const;

export const TSCONFIG_PRESETS = {
  base: {
    $schema: "https://json.schemastore.org/tsconfig",
    compilerOptions: {
      lib: ["ESNext"],
      target: "ESNext",
      module: "ESNext",
      moduleDetection: "force",
      allowJs: true,
      moduleResolution: "Bundler",
      allowImportingTsExtensions: true,
      verbatimModuleSyntax: true,
      noEmit: true,
      strict: true,
      skipLibCheck: true,
      noFallthroughCasesInSwitch: true,
      noUnusedLocals: false,
      noUnusedParameters: false,
      noPropertyAccessFromIndexSignature: false,
      esModuleInterop: true,
      isolatedModules: true,
    },
  },
  strict: {
    $schema: "https://json.schemastore.org/tsconfig",
    extends: "./base.json",
    compilerOptions: {
      noUncheckedIndexedAccess: true,
      noUnusedLocals: true,
      noUnusedParameters: true,
    },
  },
} as const;

export const ROOT_FILES = {
  GITIGNORE: `# Dependencies
node_modules/

# Build outputs
dist/
out/
*.tsbuildinfo

# Environment
.env
.env*.local

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Logs
*.log
`,
  README: (name: string) => `# ${name}

A Bun monorepo created with the monorepo bootstrapper.

## Getting Started

\`\`\`bash
bun install
\`\`\`

## Workspaces

This monorepo was generated by dler init. It uses bun workspaces to manage multiple packages.

## Scripts

Run scripts across all workspaces:

\`\`\`bash
bun --filter '*' <script>
\`\`\`

Run scripts for specific packages:

\`\`\`bash
bun --filter <package-name> <script>
\`\`\`
`,
} as const;
