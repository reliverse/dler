// apps/dler/src/cmds/perf/reporters/html.ts

import { writeFileSync } from "node:fs";
import { logger } from "@reliverse/dler-logger";
import type { PerfReport } from "../types";
import {
  formatBytes,
  formatDuration,
  formatPercentage,
} from "../utils/formatter";

export class HtmlReporter {
  private outputPath?: string;

  constructor(outputPath?: string) {
    this.outputPath = outputPath;
  }

  report(report: PerfReport): void {
    const html = this.generateHtml(report);

    if (this.outputPath) {
      try {
        writeFileSync(this.outputPath, html, "utf-8");
        logger.success(`üåê HTML report saved to: ${this.outputPath}`);
      } catch (error) {
        logger.error(`Failed to save HTML report: ${error}`);
      }
    } else {
      console.log(html);
    }
  }

  private generateHtml(report: PerfReport): string {
    const timestamp = new Date(report.timestamp).toLocaleString();

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Performance Analysis Report</title>
    <style>
        ${this.getStyles()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üìä Performance Analysis Report</h1>
            <p class="timestamp">Generated: ${timestamp}</p>
        </header>

        <main>
            ${this.generateBenchmarkSection(report.benchmark)}
            ${this.generateBundleAnalysisSection(report.bundleAnalysis)}
            ${this.generateFileSystemAnalysisSection(report.fileSystemAnalysis)}
            ${this.generateMonorepoAnalysisSection(report.monorepoAnalysis)}
            ${this.generateBaselineComparisonSection(report.baseline)}
        </main>

        <footer>
            <p>Generated by dler perf</p>
        </footer>
    </div>

    <script>
        ${this.getScripts()}
    </script>
</body>
</html>`;
  }

  private generateBenchmarkSection(
    benchmark?: PerfReport["benchmark"],
  ): string {
    if (!benchmark) return "";

    return `
        <section class="section">
            <h2>üöÄ Command Benchmark Results</h2>
            <div class="summary">
                <div class="metric">
                    <span class="label">Command:</span>
                    <span class="value">${benchmark.command}</span>
                </div>
                <div class="metric">
                    <span class="label">Runs:</span>
                    <span class="value">${benchmark.runs} (${benchmark.warmup} warmup)</span>
                </div>
                <div class="metric">
                    <span class="label">Concurrency:</span>
                    <span class="value">${benchmark.concurrency}</span>
                </div>
                <div class="metric">
                    <span class="label">Success:</span>
                    <span class="value ${benchmark.success ? "success" : "error"}">${benchmark.success ? "‚úÖ" : "‚ùå"}</span>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <h3>‚è±Ô∏è Timing Statistics</h3>
                    <div class="stat-list">
                        <div class="stat-item">
                            <span>Mean:</span>
                            <span>${formatDuration(benchmark.statistics.mean)}</span>
                        </div>
                        <div class="stat-item">
                            <span>Median:</span>
                            <span>${formatDuration(benchmark.statistics.median)}</span>
                        </div>
                        <div class="stat-item">
                            <span>Min:</span>
                            <span>${formatDuration(benchmark.statistics.min)}</span>
                        </div>
                        <div class="stat-item">
                            <span>Max:</span>
                            <span>${formatDuration(benchmark.statistics.max)}</span>
                        </div>
                        <div class="stat-item">
                            <span>P95:</span>
                            <span>${formatDuration(benchmark.statistics.p95)}</span>
                        </div>
                        <div class="stat-item">
                            <span>P99:</span>
                            <span>${formatDuration(benchmark.statistics.p99)}</span>
                        </div>
                    </div>
                </div>

                <div class="stat-card">
                    <h3>üíæ Memory Statistics</h3>
                    <div class="stat-list">
                        <div class="stat-item">
                            <span>Peak RSS:</span>
                            <span>${formatBytes(benchmark.memory.peak.rss)}</span>
                        </div>
                        <div class="stat-item">
                            <span>Avg RSS:</span>
                            <span>${formatBytes(benchmark.memory.average.rss)}</span>
                        </div>
                        <div class="stat-item">
                            <span>Peak Heap:</span>
                            <span>${formatBytes(benchmark.memory.peak.heapUsed)}</span>
                        </div>
                        <div class="stat-item">
                            <span>Avg Heap:</span>
                            <span>${formatBytes(benchmark.memory.average.heapUsed)}</span>
                        </div>
                        <div class="stat-item">
                            <span>Growth:</span>
                            <span>${formatBytes(benchmark.memory.growth)}</span>
                        </div>
                    </div>
                </div>
            </div>

            ${this.generateTimingChart(benchmark)}
        </section>`;
  }

  private generateBundleAnalysisSection(
    analysis?: PerfReport["bundleAnalysis"],
  ): string {
    if (!analysis) return "";

    return `
        <section class="section">
            <h2>üì¶ Bundle Analysis Results</h2>
            <div class="summary">
                <div class="metric">
                    <span class="label">Target:</span>
                    <span class="value">${analysis.target}</span>
                </div>
                <div class="metric">
                    <span class="label">Total Size:</span>
                    <span class="value">${formatBytes(analysis.totalSize)}</span>
                </div>
                <div class="metric">
                    <span class="label">File Count:</span>
                    <span class="value">${analysis.fileCount.toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="label">Compression Potential:</span>
                    <span class="value">${analysis.compressionPotential.toFixed(1)}%</span>
                </div>
            </div>

            ${this.generateFileTable("Largest Files", analysis.largestFiles, ["File", "Size", "Percentage", "Type"])}
            ${this.generateModuleTable("Top Modules", analysis.modules, ["Module", "Size", "Percentage", "Type"])}
            ${this.generateDuplicateTable("Duplicate Dependencies", analysis.duplicates, ["Module", "Count", "Total Size", "Locations"])}
        </section>`;
  }

  private generateFileSystemAnalysisSection(
    analysis?: PerfReport["fileSystemAnalysis"],
  ): string {
    if (!analysis) return "";

    return `
        <section class="section">
            <h2>üìÅ File System Analysis Results</h2>
            <div class="summary">
                <div class="metric">
                    <span class="label">Target:</span>
                    <span class="value">${analysis.target}</span>
                </div>
                <div class="metric">
                    <span class="label">Total Files:</span>
                    <span class="value">${analysis.totalFiles.toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="label">Total Size:</span>
                    <span class="value">${formatBytes(analysis.totalSize)}</span>
                </div>
                <div class="metric">
                    <span class="label">Directories:</span>
                    <span class="value">${analysis.directoryCount.toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="label">Max Depth:</span>
                    <span class="value">${analysis.maxDepth}</span>
                </div>
                <div class="metric">
                    <span class="label">Compression Potential:</span>
                    <span class="value">${analysis.compressionPotential.toFixed(1)}%</span>
                </div>
            </div>

            ${this.generateFileTable("Largest Files", analysis.largestFiles, ["File", "Size", "Percentage", "Type"])}
            ${this.generateDirectoryTable("Largest Directories", analysis.largestDirectories, ["Directory", "Size", "Files", "Depth"])}
            ${this.generateFileTypeTable("File Type Distribution", analysis.fileTypes, ["Type", "Count", "Size", "Percentage"])}
        </section>`;
  }

  private generateMonorepoAnalysisSection(
    analysis?: PerfReport["monorepoAnalysis"],
  ): string {
    if (!analysis) return "";

    return `
        <section class="section">
            <h2>üèóÔ∏è Monorepo Analysis Results</h2>
            <div class="summary">
                <div class="metric">
                    <span class="label">Packages:</span>
                    <span class="value">${analysis.packages.length.toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="label">Dependencies:</span>
                    <span class="value">${analysis.dependencies.edges.length.toLocaleString()}</span>
                </div>
                <div class="metric">
                    <span class="label">Circular Dependencies:</span>
                    <span class="value">${analysis.circularDependencies.length}</span>
                </div>
                <div class="metric">
                    <span class="label">Suggested Concurrency:</span>
                    <span class="value">${analysis.suggestedConcurrency}</span>
                </div>
            </div>

            ${this.generateBuildOrderSection(analysis)}
            ${this.generateCircularDependenciesSection(analysis.circularDependencies)}
            ${this.generateBottlenecksSection(analysis.bottlenecks)}
        </section>`;
  }

  private generateBaselineComparisonSection(
    baseline?: PerfReport["baseline"],
  ): string {
    if (!baseline?.exists) return "";

    return `
        <section class="section">
            <h2>üìà Baseline Comparison</h2>
            <div class="comparison">
                ${
                  baseline.improvement !== undefined
                    ? `
                    <div class="metric">
                        <span class="label">Performance:</span>
                        <span class="value improvement">+${baseline.improvement.toFixed(2)}%</span>
                    </div>
                `
                    : ""
                }
                ${
                  baseline.regression !== undefined
                    ? `
                    <div class="metric">
                        <span class="label">Performance:</span>
                        <span class="value regression">-${baseline.regression.toFixed(2)}%</span>
                    </div>
                `
                    : ""
                }
            </div>
        </section>`;
  }

  private generateFileTable(
    title: string,
    files: any[],
    headers: string[],
  ): string {
    if (files.length === 0) return "";

    return `
        <div class="table-section">
            <h3>${title}</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            ${headers.map((h) => `<th>${h}</th>`).join("")}
                        </tr>
                    </thead>
                    <tbody>
                        ${files
                          .map(
                            (file) => `
                            <tr>
                                <td class="file-path">${this.truncatePath(file.path || file.name, 50)}</td>
                                <td>${formatBytes(file.size)}</td>
                                <td>${formatPercentage(file.percentage || 0, 100)}</td>
                                <td>${file.type || (file.isExternal ? "External" : "Internal")}</td>
                            </tr>
                        `,
                          )
                          .join("")}
                    </tbody>
                </table>
            </div>
        </div>`;
  }

  private generateModuleTable(
    title: string,
    modules: any[],
    headers: string[],
  ): string {
    if (modules.length === 0) return "";

    return `
        <div class="table-section">
            <h3>${title}</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            ${headers.map((h) => `<th>${h}</th>`).join("")}
                        </tr>
                    </thead>
                    <tbody>
                        ${modules
                          .map(
                            (module) => `
                            <tr>
                                <td class="file-path">${this.truncatePath(module.name, 50)}</td>
                                <td>${formatBytes(module.size)}</td>
                                <td>${formatPercentage(module.percentage || 0, 100)}</td>
                                <td>${module.isExternal ? "External" : "Internal"}</td>
                            </tr>
                        `,
                          )
                          .join("")}
                    </tbody>
                </table>
            </div>
        </div>`;
  }

  private generateDuplicateTable(
    title: string,
    duplicates: any[],
    headers: string[],
  ): string {
    if (duplicates.length === 0) return "";

    return `
        <div class="table-section">
            <h3>${title}</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            ${headers.map((h) => `<th>${h}</th>`).join("")}
                        </tr>
                    </thead>
                    <tbody>
                        ${duplicates
                          .map(
                            (dup) => `
                            <tr>
                                <td class="file-path">${this.truncatePath(dup.name, 30)}</td>
                                <td>${dup.count}</td>
                                <td>${formatBytes(dup.totalSize)}</td>
                                <td>${dup.locations.length}</td>
                            </tr>
                        `,
                          )
                          .join("")}
                    </tbody>
                </table>
            </div>
        </div>`;
  }

  private generateDirectoryTable(
    title: string,
    directories: any[],
    headers: string[],
  ): string {
    if (directories.length === 0) return "";

    return `
        <div class="table-section">
            <h3>${title}</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            ${headers.map((h) => `<th>${h}</th>`).join("")}
                        </tr>
                    </thead>
                    <tbody>
                        ${directories
                          .map(
                            (dir) => `
                            <tr>
                                <td class="file-path">${this.truncatePath(dir.path, 50)}</td>
                                <td>${formatBytes(dir.size)}</td>
                                <td>${dir.fileCount.toLocaleString()}</td>
                                <td>${dir.depth}</td>
                            </tr>
                        `,
                          )
                          .join("")}
                    </tbody>
                </table>
            </div>
        </div>`;
  }

  private generateFileTypeTable(
    title: string,
    types: any[],
    headers: string[],
  ): string {
    if (types.length === 0) return "";

    return `
        <div class="table-section">
            <h3>${title}</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            ${headers.map((h) => `<th>${h}</th>`).join("")}
                        </tr>
                    </thead>
                    <tbody>
                        ${types
                          .map(
                            (type) => `
                            <tr>
                                <td>${type.extension || "no-extension"}</td>
                                <td>${type.count.toLocaleString()}</td>
                                <td>${formatBytes(type.totalSize)}</td>
                                <td>${formatPercentage(type.percentage || 0, 100)}</td>
                            </tr>
                        `,
                          )
                          .join("")}
                    </tbody>
                </table>
            </div>
        </div>`;
  }

  private generateBuildOrderSection(
    analysis: PerfReport["monorepoAnalysis"],
  ): string {
    if (!analysis?.dependencies.levels.length) return "";

    return `
        <div class="table-section">
            <h3>üîÑ Build Order</h3>
            <div class="build-order">
                ${analysis.dependencies.levels
                  .map(
                    (level, i) => `
                    <div class="build-level">
                        <h4>Level ${i + 1}</h4>
                        <div class="package-list">
                            ${level.map((pkg) => `<span class="package">${pkg}</span>`).join("")}
                        </div>
                    </div>
                `,
                  )
                  .join("")}
            </div>
        </div>`;
  }

  private generateCircularDependenciesSection(circular: any[]): string {
    if (circular.length === 0) return "";

    return `
        <div class="table-section">
            <h3>üîÑ Circular Dependencies</h3>
            <div class="circular-deps">
                ${circular
                  .map(
                    (circ) => `
                    <div class="circular-item ${circ.severity}">
                        <span class="severity">${circ.severity.toUpperCase()}</span>
                        <span class="cycle">${circ.cycle.join(" ‚Üí ")}</span>
                    </div>
                `,
                  )
                  .join("")}
            </div>
        </div>`;
  }

  private generateBottlenecksSection(bottlenecks: any[]): string {
    if (bottlenecks.length === 0) return "";

    return `
        <div class="table-section">
            <h3>‚ö†Ô∏è Bottlenecks</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Package</th>
                            <th>Type</th>
                            <th>Impact</th>
                            <th>Suggestion</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${bottlenecks
                          .map(
                            (bottleneck) => `
                            <tr>
                                <td>${bottleneck.package}</td>
                                <td>${bottleneck.type}</td>
                                <td>${bottleneck.impact}</td>
                                <td>${bottleneck.suggestion}</td>
                            </tr>
                        `,
                          )
                          .join("")}
                    </tbody>
                </table>
            </div>
        </div>`;
  }

  private generateTimingChart(benchmark: PerfReport["benchmark"]): string {
    if (!benchmark) return "";

    const measurements = benchmark.measurements.filter((m) => m.success);
    if (measurements.length === 0) return "";

    const maxDuration = Math.max(...measurements.map((m) => m.duration));

    return `
        <div class="chart-section">
            <h3>üìä Timing Distribution</h3>
            <div class="timing-chart">
                ${measurements
                  .map(
                    (m, i) => `
                    <div class="timing-bar">
                        <span class="run-number">${i + 1}</span>
                        <div class="bar-container">
                            <div class="bar" style="width: ${(m.duration / maxDuration) * 100}%"></div>
                            <span class="bar-value">${formatDuration(m.duration)}</span>
                        </div>
                    </div>
                `,
                  )
                  .join("")}
            </div>
        </div>`;
  }

  private truncatePath(path: string, maxLength: number): string {
    if (path.length <= maxLength) return path;
    const start = path.substring(0, Math.floor(maxLength / 2) - 2);
    const end = path.substring(path.length - Math.floor(maxLength / 2) + 2);
    return `${start}...${end}`;
  }

  private getStyles(): string {
    return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            text-align: center;
        }

        header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .timestamp {
            opacity: 0.9;
            font-size: 1.1em;
        }

        .section {
            background: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.8em;
        }

        .summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }

        .metric .label {
            font-weight: 600;
            color: #555;
        }

        .metric .value {
            font-weight: 700;
            color: #2c3e50;
        }

        .metric .value.success {
            color: #27ae60;
        }

        .metric .value.error {
            color: #e74c3c;
        }

        .metric .value.improvement {
            color: #27ae60;
        }

        .metric .value.regression {
            color: #e74c3c;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .stat-card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .stat-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .stat-item:last-child {
            border-bottom: none;
        }

        .table-section {
            margin-bottom: 30px;
        }

        .table-section h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        th {
            background: #667eea;
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }

        td {
            padding: 12px 15px;
            border-bottom: 1px solid #e9ecef;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .file-path {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.9em;
            color: #666;
        }

        .build-order {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .build-level {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }

        .build-level h4 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .package-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .package {
            background: #667eea;
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 500;
        }

        .circular-deps {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .circular-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #e74c3c;
        }

        .circular-item.low {
            border-left-color: #f39c12;
        }

        .circular-item.medium {
            border-left-color: #e67e22;
        }

        .circular-item.high {
            border-left-color: #e74c3c;
        }

        .severity {
            background: #e74c3c;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: 600;
            text-transform: uppercase;
        }

        .circular-item.low .severity {
            background: #f39c12;
        }

        .circular-item.medium .severity {
            background: #e67e22;
        }

        .cycle {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.9em;
            color: #666;
        }

        .chart-section {
            margin-top: 30px;
        }

        .chart-section h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .timing-chart {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
        }

        .timing-bar {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .run-number {
            min-width: 30px;
            font-weight: 600;
            color: #666;
        }

        .bar-container {
            flex: 1;
            position: relative;
            height: 25px;
            background: #e9ecef;
            border-radius: 12px;
            overflow: hidden;
        }

        .bar {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 12px;
            transition: width 0.3s ease;
        }

        .bar-value {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 0.9em;
            font-weight: 600;
            color: #2c3e50;
        }

        footer {
            text-align: center;
            padding: 20px;
            color: #666;
            font-size: 0.9em;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .summary {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .package-list {
                flex-direction: column;
            }
        }
    `;
  }

  private getScripts(): string {
    return `
        // Add any interactive functionality here
        document.addEventListener('DOMContentLoaded', function() {
            // Add smooth scrolling for better UX
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    document.querySelector(this.getAttribute('href')).scrollIntoView({
                        behavior: 'smooth'
                    });
                });
            });

            // Add tooltips for truncated paths
            document.querySelectorAll('.file-path').forEach(element => {
                if (element.textContent.length > 50) {
                    element.title = element.textContent;
                }
            });
        });
    `;
  }

  static save(report: PerfReport, outputPath: string): void {
    const reporter = new HtmlReporter(outputPath);
    reporter.report(report);
  }

  static print(report: PerfReport): void {
    const reporter = new HtmlReporter();
    reporter.report(report);
  }
}

export const createHtmlReporter = (outputPath?: string): HtmlReporter => {
  return new HtmlReporter(outputPath);
};
