// this file is auto-generated by
// dler rempts cmdsTs --overwrite

import type { Command } from "@reliverse/rempts";

import { relinka } from "@reliverse/relinka";
import { createJiti } from "jiti";

// Initialize jiti instance for command imports
const jiti = createJiti(import.meta.url, {
  debug: process.env.NODE_ENV === "development",
  fsCache: true,
  sourceMaps: true,
});

async function loadCommand(path: string): Promise<Command> {
  try {
    relinka("verbose", `Loading command from: ${path}`);
    const cmd = (await jiti.import(path, { default: true })) as Command;
    relinka("verbose", `Successfully loaded command from: ${path}`);
    return cmd;
  } catch (error) {
    relinka("error", `Failed to load command from ${path}:`, error);
    throw error;
  }
}

export const getCmdAgg = async (): Promise<Command> => loadCommand("./agg/cmd");

export async function getCmdBuild(): Promise<Command> {
  return loadCommand("./build/cmd");
}

export async function getCmdCheck(): Promise<Command> {
  return loadCommand("./check/cmd");
}

export async function getCmdConv(): Promise<Command> {
  return loadCommand("./conv/cmd");
}

export async function getCmdDeps(): Promise<Command> {
  return loadCommand("./deps/cmd");
}

export async function getCmdInject(): Promise<Command> {
  return loadCommand("./inject/cmd");
}

export async function getCmdInjectExpect(): Promise<Command> {
  return loadCommand("./inject/expect/cmd");
}

export async function getCmdLibs(): Promise<Command> {
  return loadCommand("./libs/cmd");
}

export async function getCmdMerge(): Promise<Command> {
  return loadCommand("./merge/cmd");
}

export async function getCmdMigrate(): Promise<Command> {
  return loadCommand("./migrate/cmd");
}

export async function getCmdPub(): Promise<Command> {
  return loadCommand("./pub/cmd");
}

export async function getCmdRelifso(): Promise<Command> {
  return loadCommand("./relifso/cmd");
}

export async function getCmdRelifsoInit(): Promise<Command> {
  return loadCommand("./relifso/init/cmd");
}

export async function getCmdRelifsoRename(): Promise<Command> {
  return loadCommand("./relifso/rename/cmd");
}

export async function getCmdRelinka(): Promise<Command> {
  return loadCommand("./relinka/cmd");
}

export async function getCmdRemptsCmd(): Promise<Command> {
  return loadCommand("./rempts/cmd/cmd");
}

export async function getCmdRemptsCmdsTs(): Promise<Command> {
  return loadCommand("./rempts/cmdsTs/cmd");
}

export async function getCmdRemptsMigrate(): Promise<Command> {
  return loadCommand("./rempts/migrate/cmd");
}

export async function getCmdSpell(): Promise<Command> {
  return loadCommand("./spell/cmd");
}

export async function getCmdSplit(): Promise<Command> {
  return loadCommand("./split/cmd");
}
