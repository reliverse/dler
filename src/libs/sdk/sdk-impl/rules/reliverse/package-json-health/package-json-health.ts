import { readPackageJSON } from "pkg-types";

import type { CheckIssue, CheckResult } from "~/libs/sdk/sdk-types";

export async function checkPackageJsonHealth(): Promise<CheckResult> {
  const startTime = Date.now();
  const issues: CheckIssue[] = [];

  try {
    const packageJson = await readPackageJSON();

    // Required fields
    if (!packageJson.name) {
      issues.push({
        type: "dler-config-health",
        message: "package.json is missing 'name' field",
        file: "package.json",
      });
    }
    if (!packageJson.version) {
      issues.push({
        type: "dler-config-health",
        message: "package.json is missing 'version' field",
        file: "package.json",
      });
    }
    if (packageJson.type !== "module") {
      issues.push({
        type: "dler-config-health",
        message: "package.json must have 'type': 'module'",
        file: "package.json",
      });
    }
    if (
      !packageJson.keywords ||
      !Array.isArray(packageJson.keywords) ||
      packageJson.keywords.length === 0
    ) {
      issues.push({
        type: "dler-config-health",
        message:
          "package.json must have 'keywords' array with at least one keyword",
        file: "package.json",
      });
    }

    // Forbidden fields
    const forbiddenFields = [
      "bin",
      "exports",
      "files",
      "main",
      "module",
    ] as const;
    for (const field of forbiddenFields) {
      if (field in packageJson) {
        issues.push({
          type: "dler-config-health",
          message: `package.json must not have '${field}' field (it is auto-generated by dler)`,
          file: "package.json",
        });
      }
    }
  } catch (error) {
    issues.push({
      type: "dler-config-health",
      message: `Failed to read/parse package.json: ${error instanceof Error ? error.message : "unknown error"}`,
      file: "package.json",
    });
  }

  return {
    success: issues.length === 0,
    issues,
    stats: {
      filesChecked: 1,
      importsChecked: 0,
      timeElapsed: Date.now() - startTime,
    },
  };
}
